/**
 * Copyright (c) 2022 Partners In Health.  All rights reserved.
 * The use and distribution terms for this software are covered by the
 * Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
 * which can be found in the file epl-v10.html at the root of this distribution.
 * By using this software in any fashion, you are agreeing to be bound by
 * the terms of this license.
 * You must not remove this notice, or any other, from this software.
 */

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    configurations.all {
        /*
         * The gradle-git-properties plugin pulls in JGit 6.x, which
         * requires Java 11+; for our builds to succeed we need 5.x.
         *
         * See https://github.com/n0mer/gradle-git-properties/issues/195
         */
        resolutionStrategy.force 'org.eclipse.jgit:org.eclipse.jgit:5+'
    }
    dependencies {
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
        classpath "org.grails:grails-gradle-plugin:${grailsVersion}"
        classpath "org.grails.plugins:database-migration:${databaseMigrationVersion}"
        classpath 'org.grails.plugins:views-gradle:1.3.0'
        classpath 'org.owasp:dependency-check-gradle:7.2.1'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.grails.org/grails/core' }
    }
}

plugins {

    id 'application'
    id 'eclipse'
    id 'groovy'
    id 'idea'
    id 'maven'
    id 'project-report'
    id 'war'

    // git magic, but releases past v2.3.0 require Gradle 5.1+
    id 'com.gorylenko.gradle-git-properties' version '2.2.4'

    // enable `npmInstall` target, as well as the `node` block below
    id 'com.moowork.node' version '1.3.1'

    // resolve a Windows-specific build issue
    id 'com.virgo47.ClasspathJar' version '1.0.0'
}

// prevent warfile issues by applying this before `asset-pipeline`. OBGM-353
apply plugin: 'org.grails.grails-web'

apply plugin: 'asset-pipeline'  // enable `assets` block, but see deps below
apply plugin: 'org.grails.plugins.views-json'  // .gson support
apply plugin: 'org.owasp.dependencycheck'  // enable dependencyCheckAnalyze task

// prevent warfile issues by applying this after `asset-pipeline`. OBGM-353
apply plugin: 'org.grails.grails-gsp'

group 'com.openboxes'
mainClassName = 'org.pih.warehouse.Application'
sourceCompatibility = 1.8
targetCompatibility = 1.8
version '0.9.0-SNAPSHOT'

assetCompile.dependsOn(['npmInstall', 'npm_run_bundle'])
assets {
    excludes = [
        '**/bundle.*.css',
        '**/bundle.*.js',
    ]
    minifyOptions = [
        languageMode: 'ES6',
        optimizationLevel: 'SIMPLE',
        targetLanguage: 'ES5',
    ]
}

bootRun {
    addResources = true
    dependsOn = ['npmInstall', 'npm_run_bundle']
    jvmArgs = [
        '-Dspring.output.ansi.enabled=never',
        '-Xdebug',
        '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'
    ]
    systemProperties System.properties
}

configurations {
    all {

        // log4j-over-slf4j exposes the same API as this fork of log4j 1.x does
        exclude group: 'ch.qos.reload4j', module: 'reload4j'

        // use HikariCP instead of com.mchange.c3p0
        exclude group: 'com.mchange'

        // superseded by com.zaxxer:HikariCP (Java 8+)
        exclude group: 'com.zaxxer', module: 'HikariCP-java6'
        exclude group: 'com.zaxxer', module: 'HikariCP-java7'

        // jcl-over-slf4j exposes the same API as commons-logging
        exclude group: 'commons-logging', module: 'commons-logging'

        // relocated to `org.dom4j:dom4j` with Java 8 support
        exclude group: 'dom4j', module: 'dom4j'

        /*
         * The same API is provided by a transitive dependency of Hibernate
         * (org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec).
         */
        exclude group: 'javax.transaction', module: 'jta'

        // log4j-over-slf4j exposes the same API as log4j 1.x
        exclude group: 'log4j', module: 'log4j'

        // log4j-to-slf4j exposes the same API as log4j 2.x
        exclude group: 'org.apache.logging.log4j', module: 'log4j'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'

        /*
         * The `asset-pipeline` has moved to com.bertramlabs.plugins.
         * Ignore requests for the out-of-date version.
         * See https://github.com/bertramdev/asset-pipeline/issues/247#issuecomment-649594531
         */
        exclude group: 'org.grails.plugins', module: 'asset-pipeline'

        resolutionStrategy {
            /*
             * Fail-fast if Gradle pulls in multiple versions of one
             * dependency, which can cause deployment problems. Note,
             * this won't differently-named modules that export the
             * same API, which also can break the build. Fortunately,
             * API collisions are less common than version collisions.
             */
            failOnVersionConflict()

            /*
             * A number of our dependencies comprise tightly coupled module
             * groups. A straightforward way to prevent intra-dependency
             * version skew is to apply useVersion() on a group-wide basis.
             */
            eachDependency { DependencyResolveDetails details ->

                if (details.requested.group == 'bouncycastle') {
                    // e.g., bouncycastle:bctsp-jdk14:138 -> org.bouncycastle:bctsp-jdk14:1.38
                    details.because 'include only one set of bouncycastle dependencies for iText'
                    details.useTarget(
                        group: 'org.bouncycastle',
                        name: details.requested.name,
                        version: bouncyCastleVersion
                    )
                }

                if (details.requested.group == 'ch.qos.logback') {
                    details.because 'use a consistent logback version'
                    details.useVersion(logbackVersion)
                }

                if (details.requested.group.startsWith('com.fasterxml.jackson')) {
                    details.because 'enforce consistent Jackson versioning'
                    if (details.requested.name == 'jackson-databind') {
                        // one module has a series of 8(!) security hotfixes
                        details.useVersion(jacksonVersion + '.8')
                    } else {
                        details.useVersion(jacksonVersion)
                    }
                }

                if (details.requested.group == 'org.apache.httpcomponents') {
                    details.because 'enforce consistent httpcomponents versioning'
                    if (details.requested.name == 'httpcore') {
                        details.useVersion(httpCoreVersion)
                    } else {
                        details.useVersion(httpComponentsVersion)
                    }
                }

                if (details.requested.group == 'org.apache.poi') {
                    details.because 'enforce consistent POI versioning'
                    details.useVersion(poiVersion)
                }

                if (details.requested.group == 'org.ow2.asm') {
                    details.because 'enforce a consistent, Java-8 compatible ASM release'
                    details.useVersion(asmVersion)
                }

                if (details.requested.group == 'org.codehaus.groovy') {
                    details.because 'enforce consistent Groovy versioning'
                    details.useVersion(groovyVersion)
                }

                if (details.requested.group == 'org.eclipse.jetty') {
                    details.because 'enforce consistent Eclipse Jetty versioning'
                    details.useVersion(jettyVersion)
                }

                if (details.requested.group == 'org.hibernate') {
                    if (details.requested.name != 'hibernate-validator') {
                        details.because 'enforce consistent hibernate versioning'
                        details.useVersion(hibernateVersion)
                    }
                }

                if (details.requested.group == 'org.jboss.byteman') {
                    details.because 'avoid beta byteman releases'
                    details.useVersion(jbossBytemanVersion)
                }

                if (details.requested.group == 'org.seleniumhq.selenium') {
                    if (details.requested.name.startsWith('selenium-')) {
                        details.because 'enforce consistent Selenium versioning'
                        details.useVersion(seleniumVersion)
                    }
                }

                if (details.requested.group == 'org.slf4j') {
                    details.because 'enforce consistent slf4j versioning'
                    details.useVersion(slf4jVersion)
                }

                if (details.requested.group == 'org.springframework') {
                    if (details.requested.name != 'springloaded') {
                        details.because 'enforce consistent Spring versioning'
                        details.useVersion(springframeworkVersion)
                    }
                }
            }

            /*
             * We can use `force` to ensure consistent sub-(sub-)dependency
             * versions, and/or to apply security patches to packages we
             * wouldn't mark in the `dependencies` block because we don't
             * consume their API's directly.
             */
            force 'com.github.sommeri:less4j:1.17.2'  // use consistent version
            force 'com.google.code.findbugs:jsr305:3.0.2'  // use consistent version
            force 'com.google.protobuf:protobuf-java:3.21.4'  // security patch
            force 'com.lowagie:itext:2.1.7'  // use latest version
            force 'commons-fileupload:commons-fileupload:1.4'  // security patch
            force 'commons-io:commons-io:2.11.0'  // security patch
            force 'commons-validator:commons-validator:1.7'  // security patch
            force 'jline:jline:2.14.6'  // use consistent version
            force 'org.antlr:antlr-runtime:3.5.3'  // use consistent version
            force 'org.apache.commons:commons-lang3:3.12.0'  // security patch
            force 'org.apache.commons:commons-text:1.9'  // use consistent version
            force 'org.apache.xmlbeans:xmlbeans:3.1.0'  // security patch, build fixes
            force 'org.dom4j:dom4j:2.1.3'  // security patch
            force 'org.quartz-scheduler:quartz:2.3.2'  // security patch
            force 'org.reactivestreams:reactive-streams:1.0.4'
            force 'xalan:serializer:2.7.2'  // security patch
            force 'xalan:xalan:2.7.2'  // security patch
            force 'xerces:xercesImpl:2.12.2'  // security patch
        }
    }
}

dependencyCheckAnalyze.dependsOn(['npmInstall', 'npm_run_bundle'])
dependencyCheck {
    analyzers {
        assemblyEnabled = false
        nodeAudit {
            enabled = true
            skipDevDependencies = true
            yarnEnabled = false  // we use npm exclusively
        }
        retirejs.enabled = true
    }

    autoUpdate = true
    failBuildOnCVSS = 11
    format = 'ALL'
    junitFailOnCVSS = 11
    skipTestGroups = true
}

node {
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
    npmVersion = '6.14.17'
    version = '14.20.0'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
    // deprecated: only needed for two dependencies (barcode4j, google-analytics)
    maven { url 'https://repo.grails.org/grails/plugins' }
}

/*
 * Add migrations to `sourceSets` *before* introducing liquibase dependencies.
 *
 * See https://grails.github.io/grails-database-migration/3.1.0/index.html
 */
sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

springBoot {
    mainClass = 'org.pih.warehouse.Application'
}

war {
    archiveName = 'openboxes.war'
    zip64 = true
}

dependencies {

    implementation 'ch.qos.logback:logback-classic'
    implementation 'ch.qos.logback:logback-core'

    /*
     * Manage static assets in the grails-app/assets/ directory.
     *
     * See https://github.com/bertramdev/asset-pipeline#documentation-1
     */
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineVersion}"
    assets "com.bertramlabs.plugins:less-asset-pipeline:${assetPipelineVersion}"
    assets "com.bertramlabs.plugins:sass-asset-pipeline:${assetPipelineVersion}"

    // security patch
    assets 'com.google.code.gson:gson:2.8.9'
    compile 'com.google.code.gson:gson:2.8.9'

    // expose javax.annotation.Nullable, com.google.common.base.Enums, etc.
    compile 'com.google.guava:guava:31.1-jre'

    compile 'com.google.zxing:javase:3.5.0'  // barcode support

    testImplementation 'com.icegreen:greenmail:1.6.10'

    // expose com.sun.mail.imap.IMAPStore to MailServiceTests
    testImplementation 'com.sun.mail:javax.mail:1.5.6'

    // use HikariCP for JDBC pooling (instead of Tomcat or c3p0)
    runtime "com.zaxxer:HikariCP:${hikariVersion}"

    assets 'commons-beanutils:commons-beanutils:1.9.4'
    compile 'commons-beanutils:commons-beanutils:1.9.4'

    compile 'commons-codec:commons-codec:1.15'

    // FIXME migrate to commons-collections4
    implementation 'commons-collections:commons-collections:3.2.2'

    implementation 'commons-fileupload:commons-fileupload:1.4'

    compile 'commons-lang:commons-lang:2.6'  // FIXME migrate to commons-lang3

    implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter.docx.docx4j:${xDocReportVersion}"
    implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.document:${xDocReportVersion}"
    implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.template:${xDocReportVersion}"

    // FIXME assess which, if any, of these sub-dependencies are still needed
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter.docx.xwpf:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter.odt.odfdom:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.document.docx:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.document.odt:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.template.freemarker:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.template.velocity:${xDocReportVersion}"

    implementation 'fr.w3blog:zebra-zpl:0.0.3'  // ZebraUtils.printZpl(), Labelary API, etc.

    /*
     * FIXME Used in only one place: ApiControllerFunctionalSpec.groovy.
     * FIXME Use apache's httpclient instead.
     */
    testCompile 'io.micronaut:micronaut-http-client:1.0.0.RC3'

    // tomcat provides these libraries
    provided 'javax.annotation:javax.annotation-api:1.3.2'
    provided 'javax.el:javax.el-api:2.2.5'
    provided "javax.servlet:javax.servlet-api:${servletVersion}"

    assets 'junit:junit:4.13.2'
    testCompile 'junit:junit:4.13.2'

    compile "mysql:mysql-connector-java:${mySqlConnectorVersion}"

    testRuntime "net.sourceforge.htmlunit:htmlunit:${htmlUnitVersion}"

    implementation 'org.apache.commons:commons-csv:1.9.0'
    compile 'org.apache.commons:commons-email:1.5'
    implementation 'org.apache.httpcomponents:httpclient'

    // log4j2 -> slf4j; cf. log4j-to-slf4j
    implementation "org.apache.logging.log4j:log4j-to-slf4j:${slf4jProvidedLog4j2Version}"

    implementation 'org.apache.poi:poi'
    implementation 'org.apache.poi:poi-scratchpad'

    // this library is provided by tomcat
    provided "org.apache.tomcat:tomcat-juli:${minimumTomcatVersion}"

    provided "org.apache.tomcat:tomcat-servlet-api:${minimumTomcatVersion}"

    // contents of this module are included in modern tomcat distributions
    provided 'org.apache.tomcat.embed:tomcat-embed-logging-log4j:8.5.2'

    // enable `import groovyx.gpars.GParsPool`, but consider grails-async-gpars?
    implementation 'org.codehaus.gpars:gpars:1.2.1'

    // enable `import groovy.sql.Sql`
    implementation 'org.codehaus.groovy:groovy-sql'

    /*
     * We can't update docx4j without refactoring ReportService.groovy
     * to not use org.docx4j.org.xhtmlrenderer.pdf.ITextRenderer.
     */
    compile 'org.docx4j:docx4j:2.8.1'  // FIXME update to 8.3.x

    // required for GORM/hibernate validators
    compile 'org.glassfish.web:javax.el:2.2.6'

    // enable grails console web ui
    console 'org.grails:grails-console'

    /*
     * Enable unit tests of domain activity; see
     * https://testing.grails.org/1.1.5/guide/index.html
     */
    testCompile 'org.grails:grails-gorm-testing-support'

    // set up grails log framework (logback under the hood)
    implementation 'org.grails:grails-logging'

    // prevent `java.lang.NullPointerException: Cannot invoke method registerStructuredEditor() on null object`
    compile 'org.grails:grails-plugin-databinding'

    // prevent `java.lang.ClassNotFoundException: grails.artefact.Interceptor`
    compile 'org.grails:grails-plugin-interceptors'

    // enable `import grails.converters.JSON`
    compile 'org.grails:grails-plugin-rest'

    // prevent Grails from thinking services are broken Domain objects
    compile 'org.grails:grails-plugin-services'

    /*
     * Deprecated: use https://github.com/grails/grails-testing-support
     *
     * FIXME Refactor instances of, e.g., `import grails.test.mixin`.
     *
     * See https://testing.grails.org/latest/guide/index.html#upgrading
     */
    testCompile('org.grails:grails-test-mixins:3.3.0') {
        /*
         * Old; relocated to `org.ow2.asm:asm`, which we pull in
         * via `org.springframework.boot:spring-boot-starter-test`.
         */
        exclude group: 'asm', module: 'asm'
        // prevent requests for ancient versions of sub-dependencies
        exclude group: 'org.grails', module: 'grails-web-jsp'
        exclude group: 'org.objenesis', module: 'objenesis'
    }

    compile 'org.grails:grails-web-boot'

    /*
     * Enable `import grails.testing.web.controllers.ControllerUnitTest`.
     * Using `testCompile` prevents integrationTestCompileClasspath warnings.
     */
    testCompile 'org.grails:grails-web-testing-support'

    /*
     * <g:formRemote> and <g:remoteLink> were deprecated in Grails 3.0:
     *
     * http://docs.grails.org/3.0.x/ref/Tags/formRemote.html
     *
     * They no longer appear in the 3.1 documentation. This plugin gives
     * them an additional lease on life, although leaving it out doesn't
     * seem to break anything.
     */
    compile 'org.grails.plugins:ajax-tags:1.0.0'

    // prevent java.lang.ClassNotFoundException for a few classes we don't directly consume
    implementation 'org.grails.plugins:async'

    // FIXME replace with com.google.zxing
    implementation('org.grails.plugins:barcode4j:0.3') {
        /*
         * Old; relocated to `org.apache.avalon.framework`, which we
         * pull in transitively via `org.apache.xmlgraphics:fop`.
         */
        exclude group: 'avalon-framework'
        exclude group: 'org.apache.ant'  // not needed for gradle builds
    }

    /*
     * Enable userAgentIdentService.isMobile() and <browser:is*> tags.
     *
     * Integration tests break messily if this is set to `implementation`.
     */
    compile 'org.grails.plugins:browser-detection:3.4.0'

    // enable `import grails.plugin.cache.Cacheable`
    implementation 'org.grails.plugins:cache'

    // enable `grails test-app -coverage`
    testImplementation('org.grails.plugins:code-coverage:2.0.3-3') {
        exclude group: 'org.apache.ant'  // not needed for gradle builds
    }

    // FIXME use commons-csv instead
    implementation 'org.grails.plugins:csv:1.0.1'

    // enable liquibase migrations
    compile("org.grails.plugins:database-migration:${databaseMigrationVersion}") {
        exclude group: 'com.h2database', module: 'h2'
    }

    // FIXME use commons-csv instead
    implementation 'org.grails.plugins:excel-import:3.0.2'

    // enable `import geb.*`
    testCompile 'org.grails.plugins:geb'

    // enable <ga:*> tags, which we use only once
    implementation 'org.grails.plugins:google-analytics:2.3.3'

    // enable prettytime.display(), which we use only three times
    implementation 'org.grails.plugins:grails-pretty-time:4.0.0'

    // enable `import org.grails.plugins.web.taglib.*`
    compile 'org.grails.plugins:gsp'

    // prevent `No GORM implementations configured. Ensure GORM has been initialized correctly`
    compile("org.grails.plugins:hibernate5:${gormVersion-'.RELEASE'}") {
        exclude group: 'com.h2database', module: 'h2'
    }

    // use a release optimized for Grails 3.3.x for this `excel-import` sub-dependency
    implementation 'org.grails.plugins:joda-time:2.1.0'

    /*
     * FIXME Configure this properly.
     *
     * See https://plugins.grails.org/plugin/agorapulse/newrelic
     * and https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/browser-monitoring-best-practices-java/
     */
    implementation 'org.grails.plugins:newrelic:5.2.0'

    // enable `import org.quartz.*`
    compile 'org.grails.plugins:quartz:2.0.13'

    // list all scheduled jobs at e.g. http://localhost:8080/openboxes/quartz
    implementation('org.grails.plugins:quartz-monitor:1.3') {
        // will pull in old asset-pipeline and quartz dependencies otherwise
        transitive = false
    }

    /*
     * FIXME Stop using grails.plugins.rendering.pdf.PdfRenderingService.
     *
     * Need `compile` here to pick up trans. deps. like RenderingTrait.
     */
    compile 'org.grails.plugins:rendering:2.0.3'

    // enable `static scaffold` declarations
    compile 'org.grails.plugins:scaffolding'

    /*
     * FIXME Configure this properly.
     *
     * See https://plugins.grails.org/plugin/agorapulse/sentry
     */
    compile 'org.grails.plugins:sentry:11.7.25'

    /*
     * These plugins enable grails-app/views/*.gson files. I don't think
     * we use this functionality, but they are included by this command:
     *
     * $ grails create-app openboxes --profile react-webpack
     *
     * See http://views.grails.org/1.2.10/
     */
    compile 'org.grails.plugins:views-json-templates'
    compile 'org.grails.plugins:views-json'

    profile 'org.grails.profiles:react-webpack'

    // enable `import org.hibernate.tool.schema.TargetType`, etc.
    compile "org.hibernate:hibernate-core:${hibernateVersion}"
    runtime "org.hibernate:hibernate-ehcache:${hibernateVersion}"
    runtime "org.hibernate:hibernate-hikaricp:${hibernateVersion}"
    testImplementation "org.hibernate:hibernate-testing:${hibernateVersion}"

    // joda-time support for hibernate
    implementation 'org.jadira.usertype:usertype.jodatime:2.0.1'

    // used in only one place: DocumentTemplateService.groovy
    implementation 'org.jxls:jxls:2.12.0'

    // strict dependency of database-migration plugin; see gradle.properties
    compile "org.liquibase:liquibase-core:${liquibaseVersion}"

    testRuntime "org.seleniumhq.selenium:htmlunit-driver:${htmlUnitVersion}"

    testCompile 'org.seleniumhq.selenium:selenium-api'
    testRuntime 'org.seleniumhq.selenium:selenium-chrome-driver'
    testRuntime 'org.seleniumhq.selenium:selenium-edge-driver'
    testRuntime 'org.seleniumhq.selenium:selenium-ie-driver'
    testRuntime 'org.seleniumhq.selenium:selenium-firefox-driver'
    testRuntime 'org.seleniumhq.selenium:selenium-safari-driver'

    implementation 'org.slf4j:jcl-over-slf4j'  // Apache/Jakarta Commons Logging -> slf4j
    implementation 'org.slf4j:jul-to-slf4j'  // java.util.logging -> slf4j
    implementation 'org.slf4j:log4j-over-slf4j'  // log4j1 -> slf4j; cf. log4j-to-slf4j
    implementation 'org.slf4j:slf4j-api'  // slf4j itself

    // enable `import spock.lang.*`
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.3-groovy-2.4'

    // enable `import org.springframework.orm.hibernate5.*`
    implementation 'org.springframework:spring-orm'

    // may enable '/health' and '/info' endpoints
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    // set up Spring log framework (slf4j under the hood)
    implementation 'org.springframework.boot:spring-boot-starter-logging'

    /*
     * Use `provided` per Grails 3's deployment guide, see
     * http://docs.grails.org/3.3.16/guide/deployment.html
     *
     * We don't support application servers other than Tomcat.
     *
     * This ticket has a good discussion of `provided` gotchas.
     * https://github.com/grails/grails-core/issues/10483
     */
    provided 'org.springframework.boot:spring-boot-starter-tomcat'

    // security patch
    compile 'org.yaml:snakeyaml:1.32'
    console 'org.yaml:snakeyaml:1.32'
}

/*
 * Update `.../META-INF/grails.build.info` after any successful build.
 */
buildProperties.doLast {
    File grailsBuildInfoFile = it.outputs.files.files.find {
        it.name == 'grails.build.info'
    }
    if (!grailsBuildInfoFile) {
        return  // nothing to do
    }

    Map<String, String> env = System.getenv()
    Properties properties = new Properties()
    grailsBuildInfoFile.withInputStream {
        properties.load(it)
    }

    properties.setProperty('build.host', InetAddress.localHost.hostName)
    properties.setProperty('build.java.version', System.getProperty('java.version'))
    properties.setProperty('build.tag', env.BUILD_TAG ?: 'N/A')
    properties.setProperty('build.time', LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME))
    properties.setProperty('build.username', System.properties['user.name'])

    if (env.bamboo_buildNumber) {
        properties.setProperty('build.git.branch', env.bamboo_planRepository_branch)
        properties.setProperty('build.git.revision', env.bamboo_planRepository_revision)
        properties.setProperty('build.number', env.bamboo_buildNumber)
    }

    grailsBuildInfoFile.withOutputStream {
        properties.store(it, null)
    }
}

task prepareDocker(type: Copy, dependsOn: assemble) {
    description = 'Copy files from ./docker and openboxes.war to build directory'
    group = 'Docker'

    from 'build/libs/openboxes.war'
    from 'docker/Dockerfile'

    into mkdir("${buildDir}/docker")
}

task writePom {
    description = 'Derive a Maven-compatible pom.xml file for downstream analysis'
    group = 'Reporting'
    doLast {
        pom {}.writeTo('pom.xml')
    }
}

tasks.withType(Test) {
    systemProperty 'geb.build.reportsDir', reporting.file('geb/integrationTest')
    systemProperty 'geb.env', System.getProperty('geb.env')
    systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
    systemProperty 'webdriver.firefox.driver', System.getProperty('webdriver.firefox.driver')
    testLogging {
        events 'failed', 'passed', 'skipped'
        exceptionFormat 'full'
    }
}
